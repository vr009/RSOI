// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package repo is a generated GoMock package.
package repo

import (
	reflect "reflect"
	models "service/models"

	gomock "github.com/golang/mock/gomock"
)

// MockIRepo is a mock of IRepo interface.
type MockIRepo struct {
	ctrl     *gomock.Controller
	recorder *MockIRepoMockRecorder
}

// MockIRepoMockRecorder is the mock recorder for MockIRepo.
type MockIRepoMockRecorder struct {
	mock *MockIRepo
}

// NewMockIRepo creates a new mock instance.
func NewMockIRepo(ctrl *gomock.Controller) *MockIRepo {
	mock := &MockIRepo{ctrl: ctrl}
	mock.recorder = &MockIRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRepo) EXPECT() *MockIRepoMockRecorder {
	return m.recorder
}

// CreatePerson mocks base method.
func (m *MockIRepo) CreatePerson(person models.Person) (models.Person, models.StatusCode) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePerson", person)
	ret0, _ := ret[0].(models.Person)
	ret1, _ := ret[1].(models.StatusCode)
	return ret0, ret1
}

// CreatePerson indicates an expected call of CreatePerson.
func (mr *MockIRepoMockRecorder) CreatePerson(person interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePerson", reflect.TypeOf((*MockIRepo)(nil).CreatePerson), person)
}

// DeletePerson mocks base method.
func (m *MockIRepo) DeletePerson(person models.Person) models.StatusCode {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePerson", person)
	ret0, _ := ret[0].(models.StatusCode)
	return ret0
}

// DeletePerson indicates an expected call of DeletePerson.
func (mr *MockIRepoMockRecorder) DeletePerson(person interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePerson", reflect.TypeOf((*MockIRepo)(nil).DeletePerson), person)
}

// GetPerson mocks base method.
func (m *MockIRepo) GetPerson(person models.Person) (models.Person, models.StatusCode) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPerson", person)
	ret0, _ := ret[0].(models.Person)
	ret1, _ := ret[1].(models.StatusCode)
	return ret0, ret1
}

// GetPerson indicates an expected call of GetPerson.
func (mr *MockIRepoMockRecorder) GetPerson(person interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPerson", reflect.TypeOf((*MockIRepo)(nil).GetPerson), person)
}

// GetPersonsList mocks base method.
func (m *MockIRepo) GetPersonsList() ([]models.Person, models.StatusCode) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPersonsList")
	ret0, _ := ret[0].([]models.Person)
	ret1, _ := ret[1].(models.StatusCode)
	return ret0, ret1
}

// GetPersonsList indicates an expected call of GetPersonsList.
func (mr *MockIRepoMockRecorder) GetPersonsList() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPersonsList", reflect.TypeOf((*MockIRepo)(nil).GetPersonsList))
}

// UpdatePerson mocks base method.
func (m *MockIRepo) UpdatePerson(person *models.Person) models.StatusCode {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePerson", person)
	ret0, _ := ret[0].(models.StatusCode)
	return ret0
}

// UpdatePerson indicates an expected call of UpdatePerson.
func (mr *MockIRepoMockRecorder) UpdatePerson(person interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePerson", reflect.TypeOf((*MockIRepo)(nil).UpdatePerson), person)
}
