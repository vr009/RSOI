// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package usecase is a generated GoMock package.
package usecase

import (
	reflect "reflect"
	models "service/models"

	gomock "github.com/golang/mock/gomock"
)

// MockIUsecase is a mock of IUsecase interface.
type MockIUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockIUsecaseMockRecorder
}

// MockIUsecaseMockRecorder is the mock recorder for MockIUsecase.
type MockIUsecaseMockRecorder struct {
	mock *MockIUsecase
}

// NewMockIUsecase creates a new mock instance.
func NewMockIUsecase(ctrl *gomock.Controller) *MockIUsecase {
	mock := &MockIUsecase{ctrl: ctrl}
	mock.recorder = &MockIUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIUsecase) EXPECT() *MockIUsecaseMockRecorder {
	return m.recorder
}

// CreatePerson mocks base method.
func (m *MockIUsecase) CreatePerson(person models.Person) (models.Person, models.StatusCode) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePerson", person)
	ret0, _ := ret[0].(models.Person)
	ret1, _ := ret[1].(models.StatusCode)
	return ret0, ret1
}

// CreatePerson indicates an expected call of CreatePerson.
func (mr *MockIUsecaseMockRecorder) CreatePerson(person interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePerson", reflect.TypeOf((*MockIUsecase)(nil).CreatePerson), person)
}

// GetPerson mocks base method.
func (m *MockIUsecase) GetPerson(person models.Person) (models.Person, models.StatusCode) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPerson", person)
	ret0, _ := ret[0].(models.Person)
	ret1, _ := ret[1].(models.StatusCode)
	return ret0, ret1
}

// GetPerson indicates an expected call of GetPerson.
func (mr *MockIUsecaseMockRecorder) GetPerson(person interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPerson", reflect.TypeOf((*MockIUsecase)(nil).GetPerson), person)
}

// GetPersonsList mocks base method.
func (m *MockIUsecase) GetPersonsList() ([]models.Person, models.StatusCode) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPersonsList")
	ret0, _ := ret[0].([]models.Person)
	ret1, _ := ret[1].(models.StatusCode)
	return ret0, ret1
}

// GetPersonsList indicates an expected call of GetPersonsList.
func (mr *MockIUsecaseMockRecorder) GetPersonsList() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPersonsList", reflect.TypeOf((*MockIUsecase)(nil).GetPersonsList))
}

// RemovePerson mocks base method.
func (m *MockIUsecase) RemovePerson(person models.Person) models.StatusCode {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemovePerson", person)
	ret0, _ := ret[0].(models.StatusCode)
	return ret0
}

// RemovePerson indicates an expected call of RemovePerson.
func (mr *MockIUsecaseMockRecorder) RemovePerson(person interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemovePerson", reflect.TypeOf((*MockIUsecase)(nil).RemovePerson), person)
}

// UpdatePerson mocks base method.
func (m *MockIUsecase) UpdatePerson(person *models.Person) models.StatusCode {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePerson", person)
	ret0, _ := ret[0].(models.StatusCode)
	return ret0
}

// UpdatePerson indicates an expected call of UpdatePerson.
func (mr *MockIUsecaseMockRecorder) UpdatePerson(person interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePerson", reflect.TypeOf((*MockIUsecase)(nil).UpdatePerson), person)
}
